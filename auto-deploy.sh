#!/bin/bash

# AgenticSeek One-Click Auto Deployment Script
# Ch·ªâ c·∫ßn ch·∫°y script n√†y tr√™n Digital Ocean droplet v√† nh·∫≠p th√¥ng tin khi ƒë∆∞·ª£c h·ªèi

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_banner() {
    clear
    echo -e "${PURPLE}"
    echo "  ___                  _   _      ___           _    "
    echo " / _ \                | | (_)    / __\         | |   "
    echo "/ /_\ \ __ _  ___ _ __ | |_ _  __/ /  ___  ___  | | __"
    echo "|  _  |/ _\` |/ _ \ '_ \| __| |/ / /  / _ \/ _ \ | |/ /"
    echo "| | | | (_| |  __/ | | | |_| / / /__|  __/  __/ |   < "
    echo "\_| |_/\__, |\___|_| |_|\__|_\____/\___|\___|_|_|\_\\"
    echo "        __/ |                                        "
    echo "       |___/                                         "
    echo -e "${NC}"
    echo -e "${BLUE}üöÄ AgenticSeek One-Click Auto Deployment${NC}"
    echo -e "${BLUE}=========================================${NC}"
    echo ""
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

print_status() {
    echo -e "${GREEN}[OK]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${PURPLE}[INFO]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "Vui l√≤ng kh√¥ng ch·∫°y script n√†y v·ªõi quy·ªÅn root"
        print_info "T·∫°o user th∆∞·ªùng v√† ch·∫°y l·∫°i script"
        exit 1
    fi
}

# Function to install prerequisites
install_prerequisites() {
    print_step "C√†i ƒë·∫∑t c√°c ph·∫ßn m·ªÅm c·∫ßn thi·∫øt..."
    
    # Update system
    sudo apt update -y
    sudo apt upgrade -y
    
    # Install basic tools
    sudo apt install -y curl wget git unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release
    
    # Install Docker
    if ! command -v docker &> /dev/null; then
        print_info "C√†i ƒë·∫∑t Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        sudo usermod -aG docker $USER
        rm get-docker.sh
        print_status "Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        print_status "Docker ƒë√£ c√≥ s·∫µn"
    fi
    
    # Install Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_info "C√†i ƒë·∫∑t Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        print_status "Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        print_status "Docker Compose ƒë√£ c√≥ s·∫µn"
    fi
    
    # Install other tools
    sudo apt install -y htop nano vim ufw fail2ban
    
    print_status "T·∫•t c·∫£ ph·∫ßn m·ªÅm c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
}

# Function to setup firewall
setup_firewall() {
    print_step "C·∫•u h√¨nh firewall..."
    
    sudo ufw --force enable
    sudo ufw default deny incoming
    sudo ufw default allow outgoing
    sudo ufw allow ssh
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    
    print_status "Firewall ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
}

# Function to clone repository
clone_repository() {
    print_step "T·∫£i m√£ ngu·ªìn AgenticSeek..."
    
    if [ -d "agenticSeek_v1" ]; then
        print_info "Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i, ƒëang c·∫≠p nh·∫≠t..."
        cd agenticSeek_v1
        git pull
        cd ..
    else
        git clone https://github.com/zeroxf89/agenticSeek_v1.git
    fi
    
    cd agenticSeek_v1
    print_status "M√£ ngu·ªìn ƒë√£ ƒë∆∞·ª£c t·∫£i"
}

# Function to collect user input
collect_user_input() {
    print_step "Thu th·∫≠p th√¥ng tin c·∫•u h√¨nh..."
    
    echo ""
    echo -e "${YELLOW}Vui l√≤ng nh·∫≠p th√¥ng tin c·∫•u h√¨nh:${NC}"
    echo ""
    
    # LLM Provider selection
    echo "Ch·ªçn nh√† cung c·∫•p LLM:"
    echo "1) OpenAI (GPT-4o-mini) - Khuy·∫øn ngh·ªã"
    echo "2) DeepSeek API - Gi√° r·∫ª"
    echo "3) Google Gemini - Mi·ªÖn ph√≠ c√≥ h·∫°n"
    echo "4) Local Ollama - Mi·ªÖn ph√≠ nh∆∞ng c·∫ßn RAM nhi·ªÅu"
    echo ""
    read -p "Nh·∫≠p l·ª±a ch·ªçn (1-4): " llm_choice
    
    case $llm_choice in
        1)
            LLM_PROVIDER="openai"
            LLM_MODEL="gpt-4o-mini"
            IS_LOCAL="False"
            echo ""
            read -p "Nh·∫≠p OpenAI API Key: " OPENAI_API_KEY
            ;;
        2)
            LLM_PROVIDER="deepseek"
            LLM_MODEL="deepseek-chat"
            IS_LOCAL="False"
            echo ""
            read -p "Nh·∫≠p DeepSeek API Key: " DEEPSEEK_API_KEY
            ;;
        3)
            LLM_PROVIDER="google"
            LLM_MODEL="gemini-2.0-flash"
            IS_LOCAL="False"
            echo ""
            read -p "Nh·∫≠p Google API Key: " GOOGLE_API_KEY
            ;;
        4)
            LLM_PROVIDER="ollama"
            LLM_MODEL="deepseek-r1:14b"
            IS_LOCAL="True"
            print_warning "B·∫°n s·∫Ω c·∫ßn c√†i ƒë·∫∑t Ollama sau khi deployment ho√†n t·∫•t"
            ;;
        *)
            print_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
            exit 1
            ;;
    esac
    
    echo ""
    read -p "T√™n cho AI assistant (m·∫∑c ƒë·ªãnh: AgenticSeek): " AGENT_NAME
    AGENT_NAME=${AGENT_NAME:-AgenticSeek}
    
    echo ""
    read -p "C√≥ mu·ªën b·∫≠t t√≠nh nƒÉng l∆∞u session kh√¥ng? (y/n, m·∫∑c ƒë·ªãnh: y): " SAVE_SESSION
    SAVE_SESSION=${SAVE_SESSION:-y}
    if [[ $SAVE_SESSION =~ ^[Yy]$ ]]; then
        SAVE_SESSION_BOOL="True"
        RECOVER_SESSION_BOOL="True"
    else
        SAVE_SESSION_BOOL="False"
        RECOVER_SESSION_BOOL="False"
    fi
    
    print_status "Th√¥ng tin c·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c thu th·∫≠p"
}

# Function to setup configuration
setup_configuration() {
    print_step "Thi·∫øt l·∫≠p c·∫•u h√¨nh..."
    
    # Generate secrets
    SEARXNG_SECRET=$(openssl rand -hex 32)
    
    # Create .env file
    cat > .env << EOF
# Production Environment Variables for AgenticSeek
SEARXNG_SECRET_KEY=$SEARXNG_SECRET
OLLAMA_URL=http://host.docker.internal:11434
LM_STUDIO_URL=http://host.docker.internal:1234
OPENAI_API_KEY=${OPENAI_API_KEY:-}
DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
HUGGINGFACE_API_KEY=
TOGETHER_API_KEY=
REDIS_URL=redis://redis:6379/0
NODE_ENV=production
PYTHONUNBUFFERED=1
CORS_ORIGINS=http://localhost,https://$(curl -s ifconfig.me)
LOG_LEVEL=INFO
EOF
    
    # Create config.ini
    cat > config.ini << EOF
[MAIN]
is_local = $IS_LOCAL
provider_name = $LLM_PROVIDER
provider_model = $LLM_MODEL
provider_server_address = 127.0.0.1:11434
agent_name = $AGENT_NAME
recover_last_session = $RECOVER_SESSION_BOOL
save_session = $SAVE_SESSION_BOOL
speak = False
listen = False
work_dir = /app/workspace
jarvis_personality = False
languages = en vi

[BROWSER]
headless_browser = True
stealth_mode = True
EOF
    
    # Create necessary directories
    mkdir -p workspace screenshots nginx/ssl
    
    print_status "C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p"
}

# Function to install Ollama if needed
install_ollama() {
    if [ "$LLM_PROVIDER" = "ollama" ]; then
        print_step "C√†i ƒë·∫∑t Ollama..."
        
        curl -fsSL https://ollama.ai/install.sh | sh
        
        print_info "ƒêang t·∫£i model $LLM_MODEL (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)..."
        ollama serve &
        sleep 10
        ollama pull $LLM_MODEL
        
        print_status "Ollama v√† model ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    fi
}

# Function to deploy services
deploy_services() {
    print_step "Tri·ªÉn khai c√°c d·ªãch v·ª•..."
    
    # Start Docker service
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # Build and start services
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    docker-compose -f docker-compose.prod.yml up --build -d
    
    print_status "C√°c d·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai"
}

# Function to wait for services
wait_for_services() {
    print_step "ƒê·ª£i c√°c d·ªãch v·ª• kh·ªüi ƒë·ªông..."
    
    echo "ƒêang ƒë·ª£i c√°c d·ªãch v·ª• s·∫µn s√†ng (c√≥ th·ªÉ m·∫•t 1-2 ph√∫t)..."
    sleep 60
    
    # Check service health
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s http://localhost/health > /dev/null 2>&1; then
            print_status "T·∫•t c·∫£ d·ªãch v·ª• ƒë√£ s·∫µn s√†ng"
            return 0
        fi
        
        echo "ƒêang ƒë·ª£i... (l·∫ßn th·ª≠ $attempt/$max_attempts)"
        sleep 10
        ((attempt++))
    done
    
    print_warning "M·ªôt s·ªë d·ªãch v·ª• c√≥ th·ªÉ ch∆∞a s·∫µn s√†ng, nh∆∞ng deployment ƒë√£ ho√†n t·∫•t"
}

# Function to setup monitoring
setup_monitoring() {
    print_step "Thi·∫øt l·∫≠p monitoring..."
    
    # Create systemd service for monitoring
    sudo tee /etc/systemd/system/agenticseek-monitor.service > /dev/null << EOF
[Unit]
Description=AgenticSeek Monitor
After=docker.service

[Service]
Type=oneshot
User=$USER
WorkingDirectory=$(pwd)
ExecStart=$(pwd)/monitor.sh
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
    
    # Create systemd timer for monitoring
    sudo tee /etc/systemd/system/agenticseek-monitor.timer > /dev/null << EOF
[Unit]
Description=Run AgenticSeek Monitor every 5 minutes
Requires=agenticseek-monitor.service

[Timer]
OnCalendar=*:0/5
Persistent=true

[Install]
WantedBy=timers.target
EOF
    
    sudo systemctl daemon-reload
    sudo systemctl enable agenticseek-monitor.timer
    sudo systemctl start agenticseek-monitor.timer
    
    print_status "Monitoring ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p"
}

# Function to setup backup
setup_backup() {
    print_step "Thi·∫øt l·∫≠p backup t·ª± ƒë·ªông..."
    
    # Add backup to crontab
    (crontab -l 2>/dev/null; echo "0 2 * * * $(pwd)/backup.sh") | crontab -
    
    print_status "Backup t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p (ch·∫°y h√†ng ng√†y l√∫c 2:00 AM)"
}

# Function to display final information
display_final_info() {
    local server_ip=$(curl -s ifconfig.me)
    
    print_banner
    echo -e "${GREEN}üéâ DEPLOYMENT HO√ÄN T·∫§T TH√ÄNH C√îNG! üéâ${NC}"
    echo ""
    echo -e "${BLUE}üìã TH√îNG TIN TRUY C·∫¨P:${NC}"
    echo -e "   üåê Web Interface: ${GREEN}http://$server_ip/${NC}"
    echo -e "   üîó API Endpoint:  ${GREEN}http://$server_ip/api/${NC}"
    echo -e "   ‚ù§Ô∏è  Health Check:  ${GREEN}http://$server_ip/health${NC}"
    echo ""
    echo -e "${BLUE}üîß L·ªÜNH QU·∫¢N L√ù:${NC}"
    echo -e "   üìä Xem tr·∫°ng th√°i:     ${YELLOW}./manage.sh status${NC}"
    echo -e "   üìù Xem logs:           ${YELLOW}./manage.sh logs -f${NC}"
    echo -e "   üîÑ Restart d·ªãch v·ª•:    ${YELLOW}./manage.sh restart${NC}"
    echo -e "   üíæ T·∫°o backup:         ${YELLOW}./manage.sh backup${NC}"
    echo -e "   üìà Monitor h·ªá th·ªëng:   ${YELLOW}./manage.sh monitor${NC}"
    echo -e "   üîÑ C·∫≠p nh·∫≠t:           ${YELLOW}./manage.sh update${NC}"
    echo ""
    echo -e "${BLUE}‚öôÔ∏è  C·∫§U H√åNH:${NC}"
    echo -e "   ü§ñ LLM Provider: ${GREEN}$LLM_PROVIDER${NC}"
    echo -e "   üß† Model: ${GREEN}$LLM_MODEL${NC}"
    echo -e "   üë§ Agent Name: ${GREEN}$AGENT_NAME${NC}"
    echo -e "   üíæ Save Session: ${GREEN}$SAVE_SESSION_BOOL${NC}"
    echo ""
    echo -e "${BLUE}üìÅ FILES QUAN TR·ªåNG:${NC}"
    echo -e "   ‚öôÔ∏è  C·∫•u h√¨nh ch√≠nh: ${YELLOW}config.ini${NC}"
    echo -e "   üîê Environment: ${YELLOW}.env${NC}"
    echo -e "   üìÇ Workspace: ${YELLOW}./workspace/${NC}"
    echo -e "   üì∏ Screenshots: ${YELLOW}./screenshots/${NC}"
    echo ""
    echo -e "${BLUE}üîí B·∫¢O M·∫¨T:${NC}"
    echo -e "   üõ°Ô∏è  Firewall: ${GREEN}ƒê√£ c·∫•u h√¨nh${NC}"
    echo -e "   üî• Fail2ban: ${GREEN}ƒê√£ c√†i ƒë·∫∑t${NC}"
    echo -e "   üìä Monitoring: ${GREEN}ƒê√£ thi·∫øt l·∫≠p${NC}"
    echo -e "   üíæ Auto Backup: ${GREEN}H√†ng ng√†y 2:00 AM${NC}"
    echo ""
    
    if [ "$LLM_PROVIDER" = "ollama" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  L∆ØU √ù OLLAMA:${NC}"
        echo -e "   Ollama ƒëang ch·∫°y local, ƒë·∫£m b·∫£o model ƒë√£ ƒë∆∞·ª£c t·∫£i:"
        echo -e "   ${YELLOW}ollama list${NC}"
        echo ""
    fi
    
    echo -e "${BLUE}üìû H·ªñ TR·ª¢:${NC}"
    echo -e "   üìö T√†i li·ªáu: ${YELLOW}DEPLOYMENT.md${NC}"
    echo -e "   üêõ B√°o l·ªói: ${YELLOW}https://github.com/zeroxf89/agenticSeek_v1/issues${NC}"
    echo -e "   üí¨ Discord: ${YELLOW}https://discord.gg/8hGDaME3TC${NC}"
    echo ""
    echo -e "${GREEN}‚ú® B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng AgenticSeek ngay b√¢y gi·ªù!${NC}"
    echo -e "${GREEN}   Truy c·∫≠p: http://$server_ip/${NC}"
    echo ""
}

# Main execution
main() {
    print_banner
    
    echo -e "${YELLOW}Script n√†y s·∫Ω t·ª± ƒë·ªông c√†i ƒë·∫∑t v√† c·∫•u h√¨nh AgenticSeek tr√™n server n√†y.${NC}"
    echo -e "${YELLOW}Qu√° tr√¨nh c√≥ th·ªÉ m·∫•t 10-15 ph√∫t.${NC}"
    echo ""
    read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/n): " confirm
    
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "Deployment ƒë√£ b·ªã h·ªßy."
        exit 0
    fi
    
    check_root
    install_prerequisites
    setup_firewall
    clone_repository
    collect_user_input
    setup_configuration
    install_ollama
    deploy_services
    wait_for_services
    setup_monitoring
    setup_backup
    display_final_info
}

# Run main function
main "$@"